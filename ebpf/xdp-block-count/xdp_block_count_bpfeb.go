// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdp_block_count returns the embedded CollectionSpec for xdp_block_count.
func loadXdp_block_count() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_block_countBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_block_count: %w", err)
	}

	return spec, err
}

// loadXdp_block_countObjects loads xdp_block_count and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_block_countObjects
//	*xdp_block_countPrograms
//	*xdp_block_countMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_block_countObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_block_count()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_block_countSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_block_countSpecs struct {
	xdp_block_countProgramSpecs
	xdp_block_countMapSpecs
	xdp_block_countVariableSpecs
}

// xdp_block_countProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_block_countProgramSpecs struct {
	XdpBlockCountProg *ebpf.ProgramSpec `ebpf:"xdp_block_count_prog"`
}

// xdp_block_countMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_block_countMapSpecs struct {
	Blocklist  *ebpf.MapSpec `ebpf:"blocklist"`
	IpCounters *ebpf.MapSpec `ebpf:"ip_counters"`
}

// xdp_block_countVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_block_countVariableSpecs struct {
}

// xdp_block_countObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_block_countObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_block_countObjects struct {
	xdp_block_countPrograms
	xdp_block_countMaps
	xdp_block_countVariables
}

func (o *xdp_block_countObjects) Close() error {
	return _Xdp_block_countClose(
		&o.xdp_block_countPrograms,
		&o.xdp_block_countMaps,
	)
}

// xdp_block_countMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_block_countObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_block_countMaps struct {
	Blocklist  *ebpf.Map `ebpf:"blocklist"`
	IpCounters *ebpf.Map `ebpf:"ip_counters"`
}

func (m *xdp_block_countMaps) Close() error {
	return _Xdp_block_countClose(
		m.Blocklist,
		m.IpCounters,
	)
}

// xdp_block_countVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdp_block_countObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_block_countVariables struct {
}

// xdp_block_countPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_block_countObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_block_countPrograms struct {
	XdpBlockCountProg *ebpf.Program `ebpf:"xdp_block_count_prog"`
}

func (p *xdp_block_countPrograms) Close() error {
	return _Xdp_block_countClose(
		p.XdpBlockCountProg,
	)
}

func _Xdp_block_countClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_block_count_bpfeb.o
var _Xdp_block_countBytes []byte
